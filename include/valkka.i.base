%module valkka_core
%include <std_string.i>
%include "cpointer.i" // simple pointer types for c(pp).  We use them for pass-by-reference cases
/* Create some functions for working with "int *" */
%pointer_functions(int, intp);

%{ // this is prepended in the wapper-generated c(pp) file
#define SWIG_FILE_WITH_INIT
#include "X11/Xlib.h"
#include "framefilter.h"
#include "framefifo.h"
#include "threadsignal.h"
#include "livethread.h"
#include "avfilethread.h"
#include "fileframefilter.h"
#include "avthread.h"
#include "openglthread.h"
#include "openglframefifo.h"
#include "sharedmem.h"
#include "logging.h"
#include "testthread.h"
#include "framefilterset.h"
#include "filestream.h"
#include "cachestream.h"
#include "valkkafs.h"
#include "usbthread.h"
#include "valkkafsreader.h"
#include "movement.h"
#include "fdwritethread.h"
#include "muxshmem.h"
#include "muxer.h"
#include "framefilter2.h"
#include "decoderthread.h"
#include "vaapithread.h"

#include <Python.h>

// https://docs.scipy.org/doc/numpy/reference/c-api.array.html#importing-the-api
// https://github.com/numpy/numpy/issues/9309#issuecomment-311320497
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayobject.h"

%}

%init %{
import_array();            // numpy initialization that should be run only once
ffmpeg_av_register_all();  // register all avcodecs, muxers, etc.
%}

// Swig should not try to create a default constructor for the following 
// classes as they're abstract (swig interface file should not have the constructors either)
// (i.e. no pyapi tags at the ctor/dtor)
%nodefaultctor FrameFilter;
%nodefaultctor Thread;
%nodefaultctor MuxFrameFilter;
%nodefaultctor AbstractFileThread; // this fucker does not have any effect

// XID types
%include<X11/X.h>

%typemap(in) (std::size_t) {
  $1=PyLong_AsSize_t($input);
}

%typemap(out) (long int) {
   $result=PyInt_FromLong($1);
}

%typemap(out) (std::size_t) {
   $result=PyInt_FromSize_t($1);
}


%inline %{

PyObject* getNumpyShmem(SharedMemRingBufferRGB* rb, int i) { // legacy stuff
  PyObject* pa;
  npy_intp dims[1];                                                               
  dims[0]=((rb->shmems)[i])->n_bytes;
  pa=PyArray_SimpleNewFromData(1, dims, NPY_UBYTE, (char*)(((rb->shmems)[i])->payload));
  return pa;                                                                       
}


bool numpy_version_ok() {
    // https://docs.scipy.org/doc/numpy/reference/c-api.array.html#importing-the-api
    return NPY_VERSION == PyArray_GetNDArrayCVersion();
}

const char* get_numpy_version() { 
    return NUMPY_VERSION;         
}

void ValkkaXInitThreads(void) {
  Status status = XInitThreads();
}

  
%}

// next, expose what is necessary
// autogenerate from this point on

